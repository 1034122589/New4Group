<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://code.alibabatech.com/schema/dubbo
       http://code.alibabatech.com/schema/dubbo/dubbo.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

<!--开启注解扫描，否则不能在ClearImgJobDemo中使用@Autowired-->
    <context:annotation-config></context:annotation-config>
    <!--或者-->
    <context:component-scan base-package="com.itheima.health"></context:component-scan>


    <!-- 指定应用名称 -->
    <dubbo:application name="health_jobs" />
    <!--指定服务注册中心地址-->
    <dubbo:registry address="zookeeper://127.0.0.1:2181"/>
    <!--批量扫描-->
    <dubbo:annotation package="com.itheima.health" />
    <!--
        超时全局设置 10分钟
        check=false 不检查服务提供方，开发阶段建议设置为false
        check=true 启动时检查服务提供方，如果服务提供方没有启动则报错
    -->
    <dubbo:consumer timeout="1200000" check="false"/>
    <!--1：自定义Job-->
    <bean id="jobDemo" class="com.itheima.health.job.ClearImgJobDemo"></bean>

    <!--2：任务描述，创建任务调度细节类，告诉执行的类和执行的方法-->
    <bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!--任务类-->
        <property name="targetObject" ref="jobDemo"></property>
        <!--任务类中的方法-->
        <property name="targetMethod" value="clearImg"></property>
    </bean>

    <!--3：定义触发器：什么时间执行任务描述-->
    <bean id="trigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="jobDetail"></property>
        <!--触发器的表达式
        -->
        <property name="cronExpression" value="0 28 18 * * ?"></property>
    </bean>

    <!--4：使用调度工厂，执行任务调度-->
    <bean id="scheduler2" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="trigger"></ref> <!--执行多个触发器-->
            </list>
        </property>
    </bean>


    <!--====================清理预约设置历史数据====================-->
    <!--1：自定义Job-->
    <bean id="clearOrderSettingJob" class="com.itheima.health.job.ClearOrderSettingJob"></bean>
    <!--2：任务描述，创建任务调度细节类，告诉执行的类和执行的方法-->
    <bean id="clearOrderSettingJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!--任务类-->
        <property name="targetObject" ref="clearOrderSettingJob"></property>
        <!--任务类中的方法-->
        <property name="targetMethod" value="ClearOrderSetting"></property>
    </bean>
    <!--3：定义触发器：什么时间执行任务描述-->
    <bean id="clearOrderSettingTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="clearOrderSettingJobDetail"></property>
        <!--<property name="cronExpression" value="0 0 2 L * ?"></property>-->
        <property name="cronExpression" value="0 4 * * * ? "></property>
    </bean>

    <!--4：使用调度工厂，执行任务调度-->
    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <!--执行多个触发器-->
                <!--<ref bean="trigger"></ref>-->
                <ref bean="clearOrderSettingTrigger"></ref>
            </list>
        </property>
    </bean>
</beans>